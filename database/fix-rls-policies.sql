-- ====================================================================
-- üîê BeeLinks - Pol√≠ticas RLS Corrigidas
-- ====================================================================
-- Execute este arquivo para corrigir problemas de sincroniza√ß√£o de usu√°rios
-- ====================================================================

-- ====================================================================
-- üë§ POL√çTICAS CORRIGIDAS PARA USERS
-- ====================================================================

-- Remover pol√≠ticas existentes conflitantes
DROP POLICY IF EXISTS "Users can view their own profile" ON users;
DROP POLICY IF EXISTS "Users can update their own profile" ON users;
DROP POLICY IF EXISTS "Public can view public profiles" ON users;
DROP POLICY IF EXISTS "Enable insert for authenticated users only" ON users;
DROP POLICY IF EXISTS "Enable read access for all users" ON users;
DROP POLICY IF EXISTS "Enable update for users based on email" ON users;

-- Pol√≠tica para permitir inser√ß√£o de usu√°rios via triggers (service_role)
CREATE POLICY "Allow service role to insert users" ON users
    FOR INSERT WITH CHECK (true);

-- Usu√°rios podem ver seus pr√≥prios dados
CREATE POLICY "Users can view their own profile" ON users
    FOR SELECT USING (auth.uid() = id);

-- Usu√°rios podem atualizar seus pr√≥prios dados
CREATE POLICY "Users can update their own profile" ON users
    FOR UPDATE USING (auth.uid() = id);

-- Perfis p√∫blicos s√£o vis√≠veis para todos (incluindo an√¥nimos)
CREATE POLICY "Public can view public profiles" ON users
    FOR SELECT USING (is_profile_public = true);

-- ====================================================================
-- ‚öôÔ∏è POL√çTICAS CORRIGIDAS PARA USER_SETTINGS
-- ====================================================================

-- Remover pol√≠ticas existentes conflitantes
DROP POLICY IF EXISTS "Users can manage their own settings" ON user_settings;
DROP POLICY IF EXISTS "Enable insert for authenticated users only" ON user_settings;

-- Permitir inser√ß√£o via service_role (triggers)
CREATE POLICY "Allow service role to insert user settings" ON user_settings
    FOR INSERT WITH CHECK (true);

-- Usu√°rios podem gerenciar suas pr√≥prias configura√ß√µes
CREATE POLICY "Users can manage their own settings" ON user_settings
    FOR ALL USING (auth.uid() = user_id);

-- ====================================================================
-- üé® POL√çTICAS CORRIGIDAS PARA THEMES
-- ====================================================================

-- Remover pol√≠ticas existentes conflitantes
DROP POLICY IF EXISTS "Users can manage their own themes" ON themes;
DROP POLICY IF EXISTS "Enable insert for authenticated users only" ON themes;

-- Permitir inser√ß√£o via service_role (triggers)
CREATE POLICY "Allow service role to insert themes" ON themes
    FOR INSERT WITH CHECK (true);

-- Usu√°rios podem gerenciar seus pr√≥prios temas
CREATE POLICY "Users can manage their own themes" ON themes
    FOR ALL USING (auth.uid() = user_id);

-- ====================================================================
-- üîß FUN√á√ÉO CORRIGIDA PARA SYNC DE USU√ÅRIOS
-- ====================================================================

-- Atualizar fun√ß√£o para usar privil√©gios de service_role
CREATE OR REPLACE FUNCTION public.sync_user_manual(user_auth_id UUID)
RETURNS JSON
LANGUAGE plpgsql
SECURITY DEFINER -- Executa com privil√©gios de service_role
AS $$
DECLARE
    auth_user_data RECORD;
    username_base VARCHAR(50);
    username_final VARCHAR(50);
    counter INTEGER := 1;
    result JSON;
BEGIN
    -- Buscar dados do usu√°rio no auth.users
    SELECT * INTO auth_user_data
    FROM auth.users 
    WHERE id = user_auth_id;
    
    -- Verificar se usu√°rio existe no auth
    IF NOT FOUND THEN
        RETURN json_build_object(
            'success', false,
            'error', 'Usu√°rio n√£o encontrado no auth.users'
        );
    END IF;
    
    -- Verificar se j√° existe no public.users
    IF EXISTS (SELECT 1 FROM public.users WHERE id = user_auth_id) THEN
        RETURN json_build_object(
            'success', false,
            'error', 'Usu√°rio j√° existe na tabela public.users'
        );
    END IF;
    
    -- Gerar username √∫nico
    username_base := LOWER(SPLIT_PART(auth_user_data.email, '@', 1));
    username_base := REGEXP_REPLACE(username_base, '[^a-z0-9_]', '', 'g');
    username_base := SUBSTRING(username_base FROM 1 FOR 20);
    
    IF username_base = '' OR username_base IS NULL THEN
        username_base := 'user';
    END IF;
    
    username_final := username_base;
    
    -- Verificar se username j√° existe e criar varia√ß√£o √∫nica
    WHILE EXISTS (SELECT 1 FROM public.users WHERE username = username_final) LOOP
        username_final := username_base || counter::TEXT;
        counter := counter + 1;
    END LOOP;
    
    -- Inserir usu√°rio na tabela public.users
    INSERT INTO public.users (
        id,
        email,
        username,
        full_name,
        bio,
        email_verified,
        created_at,
        updated_at,
        last_login
    ) VALUES (
        auth_user_data.id,
        auth_user_data.email,
        username_final,
        COALESCE(auth_user_data.raw_user_meta_data->>'full_name', ''),
        'Desenvolvedor | Criador de Conte√∫do | Tech Enthusiast',
        auth_user_data.email_confirmed_at IS NOT NULL,
        COALESCE(auth_user_data.created_at, NOW()),
        NOW(),
        auth_user_data.last_sign_in_at
    );
    
    -- Criar configura√ß√µes padr√£o do usu√°rio
    INSERT INTO public.user_settings (
        user_id,
        analytics_enabled,
        public_analytics,
        show_click_count,
        allow_link_preview,
        email_notifications,
        show_avatar,
        show_bio,
        show_social_links,
        created_at,
        updated_at
    ) VALUES (
        auth_user_data.id,
        true, false, true, true, true, true, true, true,
        NOW(), NOW()
    );
    
    -- Criar tema padr√£o
    INSERT INTO public.themes (
        user_id,
        name,
        is_default,
        primary_color,
        secondary_color,
        background_color,
        text_color,
        accent_color,
        font_family,
        border_radius,
        button_style,
        created_at,
        updated_at
    ) VALUES (
        auth_user_data.id,
        'Tema BeeLinks',
        true,
        '#FFD700', '#FFC107', '#1A1A1A', '#FFFFFF', '#2D2D2D',
        'Inter', 12, 'rounded',
        NOW(), NOW()
    );
    
    -- Retornar sucesso
    RETURN json_build_object(
        'success', true,
        'username', username_final,
        'message', 'Usu√°rio sincronizado com sucesso!'
    );
    
EXCEPTION
    WHEN OTHERS THEN
        -- Log do erro e retornar
        RAISE LOG 'Erro ao sincronizar usu√°rio %: %', user_auth_id, SQLERRM;
        RETURN json_build_object(
            'success', false,
            'error', SQLERRM
        );
END;
$$;

-- ====================================================================
-- üîß GRANTS NECESS√ÅRIOS
-- ====================================================================

-- Permitir que a fun√ß√£o seja executada por usu√°rios autenticados
GRANT EXECUTE ON FUNCTION public.sync_user_manual(UUID) TO authenticated;
GRANT EXECUTE ON FUNCTION public.sync_user_manual(UUID) TO anon;

-- Garantir que service_role tem acesso total
GRANT ALL ON ALL TABLES IN SCHEMA public TO service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO service_role;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO service_role;

-- ====================================================================
-- ‚úÖ POL√çTICAS RLS CORRIGIDAS
-- ====================================================================
-- Execute tamb√©m: SELECT public.sync_user_manual(auth.uid());
-- Para sincronizar o usu√°rio atual
-- ====================================================================
